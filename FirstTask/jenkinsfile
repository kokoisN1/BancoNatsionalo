pipeline {
  agent any
  
  //environment {
  //  AWS_DEFAULT_REGION = 'us-east-2'
  //  AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
  //  AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
  //}
  
  stages {
    stage('Build') {
      steps {
        dir('FirstTask/pythonapp') {
            // git 'git@github.com:kokoisN1/BancoNatsionalo.git'
            //sh 'wget https://s3.amazonaws.com/solutions-reference/aws-instance-scheduler/latest/scheduler-cli.zip'
            //sh 'unzip scheduler-cli.zip'
            //sh 'python3 setup.py install'
            //sh 'sudo apt install python3-pip'
            //sh 'pip3 install -r requirements.txt'
            //sudo python3 setup.py install --home ./package
            //pip install --target ./package -r requirements.txt
            
            //sh 'pip3 install requests -t .'
            sh 'zip -r ../function.zip ./*'
        }
      }
    }
    
//    stage('Deploy Lambda Function') {
//    steps {
//      dir('FirstTask') {
//          withCredentials([[  $class           : 'AmazonWebServicesCredentialsBinding',
//                              credentialsId    : 'aws-access-key-id',
//                              accessKeyVariable: 'AWS_ACCESS_KEY_ID',
//                              secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
//            script {
//                  def functionName = "my-function"
//                  def functionExists = sh(script: "aws lambda get-function --function-name ${functionName}", returnStatus: true) == 0
//
//                  if (functionExists) {
//                        echo "Function already exists"
//                        sh 'aws lambda update-function-code --function-name my-function --zip-file fileb://function.zip --publish'
//                        sleeploop=3
//                        while (sleeploop > 0) {
//                            try {
//                                sh 'aws lambda update-function-configuration --function-name my-function --runtime python3.9'
//                                sleeploop = -1 // stop the loop
//                            } catch (Exception e) {
//                                echo 'Retying ... in 10 seconds' + e.toString()
//                            }
//                            sleep(10)
//                            sleeploop = sleeploop - 1
//                        }
//                  } else {
//                        echo "Function does not exist. Creating..."
//                        sh(script: """
//                            aws lambda create-function \
//                            --function-name ${functionName} \
//                            --handler myapp.index \
//                            --runtime python3.9 \
//                            --role arn:aws:iam::722738472774:role/iam_for_lambda \
//                            --zip-file fileb://function.zip \
//                            --environment Variables="{BUCKET_NAME=my-bucket}"
//                        """)
//                  }
//            }
//          }
//      }
//    }
//  }
    
    stage('Create API Gateway with Terraform') {
      steps {
        dir('FirstTask') {
            withCredentials([[  $class           : 'AmazonWebServicesCredentialsBinding',
                                credentialsId    : 'aws-access-key-id',
                                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
              sh "terraform init -var 'region=us-east-2' -var 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' -var 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}'"
              sh "terraform apply -auto-approve -var 'region=us-east-2' -var 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' -var 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}'"
            }
        }
      }
    }
    
//  stage('Deploy API Gateway') {
//    steps {
//      dir('FirstTask') {
//          withCredentials([[  $class           : 'AmazonWebServicesCredentialsBinding',
//                              credentialsId    : 'aws-access-key-id',
//                              accessKeyVariable: 'AWS_ACCESS_KEY_ID',
//                              secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
//            sh "  terraform apply -auto-approve -var 'region=us-east-2' -var 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' -var 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}'"
//          }
//      }
//    }
//  }
  }
  
  post {
    success {
      sh 'echo "Pipeline successful"'
    }
    failure {
      sh 'echo "Pipeline failed"'
    }
  }
}
