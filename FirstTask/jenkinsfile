pipeline {
  agent any
  
  //environment {
  //  AWS_DEFAULT_REGION = 'us-east-2'
  //  AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
  //  AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
  //}
  
  stages {
    stage('Build') {
      steps {
        dir('FirstTask/pythonapp') {
            //git 'https://github.com/my-repo.git'
            sh 'pip install -r requirements.txt'
            sh 'zip -r ../function.zip ./*'
        }
      }
    }
    
    stage('Deploy Lambda Function') {
      steps {
        dir('FirstTask') {
            withCredentials([[  $class           : 'AmazonWebServicesCredentialsBinding',
                                credentialsId    : 'aws-access-key-id',
                                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
              sh 'aws lambda update-function-code --function-name my-function --zip-file fileb://function.zip --publish'
              sh 'aws lambda update-function-configuration --function-name my-function --runtime python3.9'
            }
        }
      }
    }
    
    stage('Create API Gateway with Terraform') {
      steps {
        dir('FirstTask') {
            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
              sh 'terraform init'
              sh 'terraform apply -auto-approve'
            }
        }
      }
    }
    
    stage('Deploy API Gateway') {
      steps {
        dir('FirstTask') {
            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
              sh 'terraform apply -auto-approve'
            }
        }
      }
    }
  }
  
  post {
    success {
      sh 'echo "Pipeline successful"'
    }
    failure {
      sh 'echo "Pipeline failed"'
    }
  }
}
